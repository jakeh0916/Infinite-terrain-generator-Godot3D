[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

uniform sampler2D depth_tex : hint_albedo;
uniform sampler2D shore_tex : hint_albedo;
uniform sampler2D grass_tex : hint_albedo;
uniform sampler2D cliff_tex : hint_albedo;

uniform sampler2D depth_norm : hint_albedo;
uniform sampler2D shore_norm : hint_albedo;
uniform sampler2D grass_norm : hint_albedo;
uniform sampler2D cliff_norm : hint_albedo;

varying vec3 interp_world_pos;
varying vec3 interp_norm;

uniform float uv_scale = 1.0;

void vertex() {
	interp_world_pos = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	interp_norm = NORMAL;
}

void fragment() {
	vec2 uv = UV * uv_scale;
	
	if (interp_world_pos.y < -20.0) {
		ALBEDO = texture(depth_tex, uv).rgb;
		NORMALMAP = texture(depth_norm, uv).rgb;
	} else if (interp_world_pos.y < -5.0) {
		float m = (interp_world_pos.y + 20.0) / 15.0;
		ALBEDO = mix(texture(depth_tex, uv).rgb, texture(shore_tex, uv).rgb, m);
		NORMALMAP = mix(texture(depth_norm, uv).rgb, texture(shore_norm, uv).rgb, m);
	} else if (interp_world_pos.y < 0.0) {
		ALBEDO = texture(shore_tex, uv).rgb;
		NORMALMAP = texture(shore_norm, uv).rgb;
	} else if (interp_world_pos.y < 5.0) {
		float m = interp_world_pos.y / 5.0;
		ALBEDO = mix(texture(shore_tex, uv).rgb, texture(grass_tex, uv).rgb, m);
		NORMALMAP = mix(texture(shore_norm, uv).rgb, texture(grass_norm, uv).rgb, m);
	} else {
		ALBEDO = texture(grass_tex, uv).rgb;
		NORMALMAP = texture(grass_norm, uv).rgb;
		if (interp_norm.y >= 0.0 && interp_norm.y < 0.3) {
			float s = interp_norm.y / 0.3;
			ALBEDO = mix(texture(cliff_tex, uv).rgb, texture(grass_tex, uv).rgb, s);
			NORMALMAP = mix(texture(cliff_norm, uv).rgb, texture(grass_norm, uv).rgb, s);
		}
	}
}
"
